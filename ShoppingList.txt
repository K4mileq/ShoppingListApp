FontStyleConverter.cs:
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Maui.Controls;

namespace ShopingListApp.Converters
{
    public class FontStyleConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if(value is bool isPurchased)
            {
                return isPurchased ? FontAttributes.Italic : FontAttributes.None;
            }
            return FontAttributes.None;
        }


        public object? ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}


TextDecorationConverter.cs:
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShopingListApp.Converters
{
    class TextDecorationConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool isPurchased)
            {
                return isPurchased ? TextDecorations.Strikethrough : TextDecorations.None;
            }
            return TextDecorations.None;
        }

        public object? ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}


Category.cs:
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace ShopingListApp.Models
{
    public class Category : INotifyPropertyChanged
    {
        public string Name { get; set; }
        public ObservableCollection<string> Units { get; set; } = new();
        public ObservableCollection<Product> Products { get; set; } = new();

        private bool _isExpanded = true;
        public bool IsExpanded
        {
            get => _isExpanded;
            set
            {
                if (_isExpanded != value)
                {
                    _isExpanded = value;
                    OnPropertyChanged();
                }
            }
        }

        public bool HasProducts => Products?.Count > 0;

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public Category()
        {
            Products.CollectionChanged += (s, e) => OnPropertyChanged(nameof(HasProducts));
        }
    }
}

Product.cs:
using System;
using System.ComponentModel;

namespace ShopingListApp.Models
{
    public class Product : INotifyPropertyChanged
    {
        private bool _isPurchased;
        private double _quantity;

        public string Name { get; set; }

        // Właściwość Quantity, która wywołuje OnPropertyChanged, gdy wartość się zmienia
        public double Quantity
        {
            get => _quantity;
            set
            {
                if (_quantity != value)  // Jeśli wartość się zmienia
                {
                    _quantity = value;
                    OnPropertyChanged(nameof(Quantity));  // Powiadamiamy o zmianie
                }
            }
        }

        public string Unit { get; set; } // Jednostka miary: "szt", "l", "kg"
        public string Category { get; set; }

        public bool IsPurchased
        {
            get => _isPurchased;
            set
            {
                if (_isPurchased != value)  // Jeśli wartość się zmienia
                {
                    _isPurchased = value;
                    OnPropertyChanged(nameof(IsPurchased));  // Powiadamiamy o zmianie
                }
            }
        }

        // Zdarzenie PropertyChanged, które wywołuje powiadomienie o zmianach
        public event PropertyChangedEventHandler PropertyChanged;

        // Metoda wywołująca powiadomienie o zmianie właściwości
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}


AddCategoryViewModel.cs:
using ShopingListApp.Models;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace ShopingListApp.ViewModels
{
    public class AddCategoryViewModel : INotifyPropertyChanged
    {
        private string _categoryName;
        public string CategoryName
        {
            get => _categoryName;
            set
            {
                if(_categoryName != value)
                {
                    _categoryName = value;
                    OnPropertyChanged(nameof(CategoryName));
                }
            }
        }

        public ObservableCollection<CategoryViewModel> Categories { get; }

        public ICommand AddCategoryCommand { get; }
        public ICommand CancelCommand { get; }

        public event PropertyChangedEventHandler PropertyChanged;

        public AddCategoryViewModel()
        {
            Categories = ShoppingListViewModel.Instance.Categories;
            AddCategoryCommand = new Command(AddCategory);
            CancelCommand = new Command(Cancel);

        }

        private async void AddCategory()
        {
            if (string.IsNullOrWhiteSpace(CategoryName))
            {
                await Application.Current.MainPage.DisplayAlert("Błąd", "Podaj nazwę kategorii", "OK");
                return;
            }

            
            var newCategory = new CategoryViewModel
            {
                Name = CategoryName,
            };
            ShoppingListViewModel.Instance.Categories.Add(newCategory);


            if (!ShoppingListViewModel.Instance.Categories.Contains(newCategory))
            {
                ShoppingListViewModel.Instance.Categories.Add(newCategory);
            }

            ShoppingListViewModel.Instance.SaveToXml();
        
            

            await Application.Current.MainPage.Navigation.PopAsync();
        }

        private async void Cancel()
        {
            await Application.Current.MainPage.Navigation.PopAsync();
        }

        private void OnPropertyChanged(string propretyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propretyName));
        }
    }
}


AddProductViewModel.cs:
using ShopingListApp.Models;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShopingListApp.ViewModels
{
    public class AddProductViewModel : INotifyPropertyChanged
    {
        public string Name { get; set; }
        public double Quantity { get; set; } = 1;
        public string SelectedUnit { get; set; }
        public Category SelectedCategory { get; set; }

        public ObservableCollection<string> Units { get; } = new() { "szt", "l", "kg" };
        public ObservableCollection<Category> Categories { get; }

        private ShoppingListViewModel _shoppingListViewModel;

        public Command AddProductCommand { get; }

        public AddProductViewModel(ShoppingListViewModel shoppingListViewModel)
        {
            _shoppingListViewModel = shoppingListViewModel;

            Categories = new ObservableCollection<Category>(
                _shoppingListViewModel.Categories.Select(c => new Category
                {
                    Name = c.Name,
                    Products = new ObservableCollection<Product>(c.Products)
                })
            );

            AddProductCommand = new Command(AddProduct);
        }

        private async void AddProduct()
        {
            if (string.IsNullOrWhiteSpace(Name) || string.IsNullOrWhiteSpace(SelectedUnit) || SelectedCategory == null)
            {
                await Application.Current.MainPage.DisplayAlert("Błąd", "Wypełnij wszystkie pola!", "OK");
                return;
            }

            var product = new Product
            {
                Name = Name,
                Quantity = Quantity,
                Unit = SelectedUnit,
                Category = SelectedCategory.Name,
                IsPurchased = false
            };

            _shoppingListViewModel.AddProduct(product);
            await Application.Current.MainPage.Navigation.PopAsync();
        }

        public event PropertyChangedEventHandler PropertyChanged;
    }

}


CategoryViewModel.cs:
using ShopingListApp.Models;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;

namespace ShopingListApp.ViewModels
{
    public class CategoryViewModel : INotifyPropertyChanged
    {
        public ObservableCollection<string> Units { get; set; } = new();
        public string Name { get; set; }
        public ObservableCollection<Product> Products { get; set; } = new();

        private bool _isExpanded = true;
        public bool IsExpanded
        {
            get => _isExpanded;
            set
            {
                if (_isExpanded != value)
                {
                    _isExpanded = value;
                    OnPropertyChanged();
                }
            }
        }

        // Sprawdza, czy kategoria ma produkty
        public bool HasProducts => Products?.Count > 0;

        // Komenda do przełączania rozwinięcia kategorii
        public Command ToggleCategoryCommand { get; }

        public CategoryViewModel()
        {
            // Przypisanie komendy do toggle'owania kategorii
            ToggleCategoryCommand = new Command(ToggleCategory);
        }

        // Metoda do przełączania stanu rozwinięcia/zwinięcia
        private void ToggleCategory()
        {
            IsExpanded = !IsExpanded;
        }

        // Tylko jedno zdarzenie PropertyChanged w klasie
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}


ProductViewModel.cs:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShopingListApp.ViewModels
{
    internal class ProductViewModel
    {
    }
}



ShoppingListViewModel.cs:
using ShopingListApp.Models;
using ShopingListApp.Views;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Xml.Serialization;

namespace ShopingListApp.ViewModels
{
    public class ShoppingListViewModel : INotifyPropertyChanged
    {
        public static ShoppingListViewModel Instance { get; private set; }
        public ObservableCollection<CategoryViewModel> Categories { get; set; } = new();

        public Command AddProductCommand { get; }
        public Command AddCategoryCommand { get; }

        public ShoppingListViewModel()
        {
            Instance = this;
            AddProductCommand = new Command(OpenAddProductPage);
            AddCategoryCommand = new Command(OpenAddCategoryPage);

            // Inicjalizacja kategorii
            Categories.Add(new CategoryViewModel
            {
                Name = "Nabiał",
                Products = new ObservableCollection<Product>
                {
                    new Product { Name = "Mleko", Quantity = 1, Unit = "l", Category = "Nabiał", IsPurchased = false }
                }
            });
            Categories.Add(new CategoryViewModel
            {
                Name = "Warzywa",
                Products = new ObservableCollection<Product>
                {
                    new Product { Name = "Ziemniaki", Quantity = 5, Unit = "kg", Category = "Warzywa", IsPurchased = false }
                }
            });
            Categories.Add(new CategoryViewModel
            {
                Name = "Owoce",
                Products = new ObservableCollection<Product>
                {
                    new Product { Name = "Jabłka", Quantity = 2, Unit = "kg", Category = "Owoce", IsPurchased = false }
                }
            });
            Categories.Add(new CategoryViewModel
            {
                Name = "Elektronika",
                Products = new ObservableCollection<Product>
                {
                    new Product { Name = "Baterie", Quantity = 2, Unit = "szt", Category = "Elektronika", IsPurchased = false }
                }
            });
            Categories.Add(new CategoryViewModel
            {
                Name = "Inne",
                Products = new ObservableCollection<Product>
                {
                    new Product { Name = "Parasol", Quantity = 1, Unit = "szt", Category = "Inne", IsPurchased = false }
                }
            });

            // Załaduj dane z pliku XML
            LoadFromXml();

        }

        private async void OpenAddProductPage()
        {
            await Application.Current.MainPage.Navigation.PushAsync(new AddProductPage(this));
        }

        private async void OpenAddCategoryPage()
        {
            await Application.Current.MainPage.Navigation.PushAsync(new AddCategoryPage());
        }


        public void AddProduct(Product product)
        {
            var category = Categories.FirstOrDefault(c => c.Name == product.Category);
            if (category == null)
            {
                category = new CategoryViewModel { Name = product.Category };
                Categories.Add(category);
            }
            category.Products.Add(product);
            SaveToXml();

        }

        public void AddCategory(string categoryName)
        {
            var category = Categories.FirstOrDefault(c => c.Name == categoryName);
            if (category == null)
            {
                category = new CategoryViewModel 
                { 
                    Name = categoryName,
                    Products = new ObservableCollection<Product>()
                };
                Categories.Add(category);
                SaveToXml();
            }
        }

        public void LoadFromXml()
        {
            if (!File.Exists(GetFilePath())) return;

            var serializer = new XmlSerializer(typeof(List<Category>));
            using var reader = new StreamReader(GetFilePath());
            var categories = (List<Category>)serializer.Deserialize(reader);
            Categories.Clear();
            foreach (var category in categories)
            {
                Categories.Add(new CategoryViewModel
                {
                    Name = category.Name,
                    Products = new ObservableCollection<Product>(category.Products)
                });
            }
        }

        public void SaveToXml()
        {
            var serializer = new XmlSerializer(typeof(List<Category>));
            using var writer = new StreamWriter(GetFilePath());

            var categoriesToSave = Categories.Select(c => new Category
            {
                Name = c.Name,
                Products = new ObservableCollection<Product>(
                    c.Products.Select(p => new Product
                    {
                        Name = p.Name,
                        Quantity = p.Quantity,
                        Unit = p.Unit,
                        Category = p.Category,
                        IsPurchased = p.IsPurchased
                    }))
            }).ToList();

            serializer.Serialize(writer, categoriesToSave);
        }


        private string GetFilePath() =>
            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "shopping_list.xml");

        public event PropertyChangedEventHandler PropertyChanged;
    }
}


AddCategoryPage.xaml:
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:ShopingListApp.ViewModels"
             x:Class="ShopingListApp.Views.AddCategoryPage"
             Title="Dodaj Kategorię">
    <ContentPage.BindingContext>
        <vm:AddCategoryViewModel />
    </ContentPage.BindingContext>

    <StackLayout Padding="10">
        <Entry  Text="{Binding CategoryName, Mode=TwoWay}" Placeholder="Wpisz nazwę kategorii" />
        <Button Text="Dodaj kategorię" Command="{Binding AddCategoryCommand}" />
        <Button Text="Anuluj" Command="{Binding CancelCommand}" />
    </StackLayout> 
</ContentPage>

AddCategoryPage.xaml.cs:
using ShopingListApp.ViewModels;
namespace ShopingListApp.Views;
using Microsoft.Maui.Controls;

public partial class AddCategoryPage : ContentPage
{
	public AddCategoryPage()
	{
		InitializeComponent();
    }
}

AddProductPage.xaml:
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="ShopingListApp.Views.AddProductPage"
             Title="Dodaj produkt">
    <VerticalStackLayout Padding="20">
        <Entry Placeholder="Nazwa produktu" Text="{Binding Name}" />
        <Entry Placeholder="Ilość" Keyboard="Numeric" Text="{Binding Quantity}" />

        <!-- Wybór jednostki miary -->
        <Picker Title="Jednostka" ItemsSource="{Binding Units}" SelectedItem="{Binding SelectedUnit}" />

        <!-- Wybór kategorii (teraz wyświetlamy pełne obiekty Category, z możliwością wyboru) -->
        <Picker Title="Kategoria" ItemsSource="{Binding Categories}" 
                ItemDisplayBinding="{Binding Name}" SelectedItem="{Binding SelectedCategory}" />

        <Button Text="Dodaj" Command="{Binding AddProductCommand}" />
    </VerticalStackLayout>
</ContentPage>


AddProductPage.xaml.cs:
using ShopingListApp.ViewModels;

namespace ShopingListApp.Views;

public partial class AddProductPage : ContentPage
{
    public AddProductPage(ShoppingListViewModel viewModel)
    {
        InitializeComponent();
        BindingContext = new AddProductViewModel(viewModel);
    }
}

CategoryView.xaml:
<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:local="clr-namespace:ShopingListApp.Views"
             x:Class="ShopingListApp.Views.CategoryView">
    <VerticalStackLayout IsVisible="{Binding HasProducts}">
        <Button Text="{Binding Name}" Command="{Binding ToggleExpandCommand}" />
        <CollectionView ItemsSource="{Binding Products}" IsVisible="{Binding IsExpanded}">
            <CollectionView.ItemTemplate>
                <DataTemplate>
                    <local:ProductView BindingContext="{Binding}" />
                </DataTemplate>
            </CollectionView.ItemTemplate>
        </CollectionView>
    </VerticalStackLayout>
</ContentView>


CategoryView.xaml.cs:
namespace ShopingListApp.Views;

public partial class CategoryView : ContentView
{
	public CategoryView()
	{
		InitializeComponent();
	}
}

MainPage.xaml:
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:ShopingListApp.ViewModels"
             xmlns:local="clr-namespace:ShopingListApp.Views"
             x:Class="ShopingListApp.Views.MainPage"
             Title="Lista Zakupów">
    <ContentPage.BindingContext>
        <vm:ShoppingListViewModel />
    </ContentPage.BindingContext>

    <ScrollView>
        <VerticalStackLayout>
            <CollectionView ItemsSource="{Binding Categories}">
                <CollectionView.ItemTemplate>
                    <DataTemplate>
                        <StackLayout>
                            <!-- Przycisk do rozwinięcia/zwinięcia kategorii -->
                            <Button Text="{Binding Name}" 
                                    Command="{Binding ToggleCategoryCommand}" />

                            <!-- Lista produktów tylko, gdy kategoria jest rozwinięta -->
                            <CollectionView IsVisible="{Binding IsExpanded}" ItemsSource="{Binding Products}">
                                <CollectionView.ItemTemplate>
                                    <DataTemplate>
                                        <local:ProductView BindingContext="{Binding}" />
                                    </DataTemplate>
                                </CollectionView.ItemTemplate>
                            </CollectionView>
                        </StackLayout>
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>
            <Button Text="Dodaj produkt" Command="{Binding AddProductCommand}" />
            <Button Text="Dodaj kategorie" Command="{Binding AddCategoryCommand}" />
        </VerticalStackLayout>
    </ScrollView>
</ContentPage>


MainPage.xaml.cs:
using ShopingListApp.ViewModels;

namespace ShopingListApp.Views;

public partial class MainPage : ContentPage
{
    private ShoppingListViewModel _viewModel;

    public MainPage()
    {
        InitializeComponent();
        _viewModel = new ShoppingListViewModel();
        BindingContext = _viewModel;
    }

    protected override void OnDisappearing()
    {
        base.OnDisappearing();
        _viewModel.SaveToXml();
    }
}

ProductView.xaml:
<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="ShopingListApp.Views.ProductView">
    <HorizontalStackLayout VerticalOptions="Center">
        <CheckBox IsChecked="{Binding IsPurchased}" VerticalOptions="Center" />
        <Label Text="{Binding Name}" 
               TextDecorations="{Binding IsPurchased, Converter={StaticResource TextDecorationConverter}}"
               FontAttributes="{Binding IsPurchased, Converter={StaticResource FontStyleConverter}}"
               VerticalOptions="Center"/>
        <Button Text="-" Clicked="OnDecreaseQuantityClicked" VerticalOptions="Center"/>
        <Label Text="{Binding Quantity, StringFormat='{}Ilość: {0}'}" VerticalOptions="Center"/>
        <Label Text="{Binding Unit}" VerticalOptions="Center"/>
        <Button Text="+" Clicked="OnIncreaseQuantityClicked" VerticalOptions="Center"/>
        <Button Text="Usuń" Clicked="OnRemoveProductClicked" VerticalOptions="Center"/>
    </HorizontalStackLayout>
</ContentView>


ProductView.xaml.cs:
using ShopingListApp.Models;
using ShopingListApp.ViewModels;
using System.Linq;

namespace ShopingListApp.Views
{
    public partial class ProductView : ContentView
    {
        public ProductView()
        {
            InitializeComponent();
        }

        // Metoda zmniejszająca ilość produktu
        private void OnDecreaseQuantityClicked(object sender, EventArgs e)
        {
            if (BindingContext is Product product)
            {
                if (product.Quantity > 0)
                {
                    product.Quantity--;  // Zmniejszamy ilość
                    ShoppingListViewModel.Instance.SaveToXml();  // Zapisujemy dane do pliku
                }
            }
        }

        // Metoda zwiększająca ilość produktu
        private void OnIncreaseQuantityClicked(object sender, EventArgs e)
        {
            if (BindingContext is Product product)
            {
                product.Quantity++;  // Zwiększamy ilość
                ShoppingListViewModel.Instance.SaveToXml();  // Zapisujemy dane do pliku
            }
        }

        // Metoda usuwająca produkt
        private void OnRemoveProductClicked(object sender, EventArgs e)
        {
            if (BindingContext is Product product)
            {
                var category = ShoppingListViewModel.Instance.Categories
                    .FirstOrDefault(c => c.Products.Contains(product));  // Znajdujemy kategorię, do której należy produkt

                if (category != null)
                {
                    category.Products.Remove(product);  // Usuwamy produkt z kategorii
                    ShoppingListViewModel.Instance.SaveToXml();  // Zapisujemy dane do pliku
                }
            }
        }
    }
}
